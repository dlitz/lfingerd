#!/usr/bin/python2.2
"""lfingerd is a simple finger server.  See RFC 1288"""

# This is a rewrite of lfingerd 1.x, which was written in Perl.

# SECURITY CONSIDERATIONS:
# 1. This program depends on all the functions it calls being 8-bit safe.
# Particularly, it passes arbitrary user strings to pwd.getpwnam(), open(),
# and re.split(), among other functions.
# 2. This program should not be run as a privileged user (including root).
# 3. This program will follow symlinks if your system does not support the
# O_NOFOLLOW flag for open(2).


# Initialization
import re, sys, os, pwd, errno, exceptions

VERSION = "2.1"
VERSION_INFO = "lfingerd -- Version " + VERSION
COPYRIGHT_INFO = VERSION_INFO + """
Copyright (c) 2002, 2003 Dwayne C. Litzenberger <dlitz@dlitz.net>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
"""

def mysafeopen(homedir, filename):
	global ALLOW_SYMLINKS
	if os.path.split(filename)[0] != "":
		raise ValueError, "Filename contained path information"
	flags = os.O_RDONLY
	if not ALLOW_SYMLINKS:
		flags |= os.O_NOFOLLOW
	fd = os.open(os.path.join(homedir, filename), flags, 0)
	file = os.fdopen(fd, "rb")
	return file

CRLF = "\x0d\x0a"
RequestError = "finger: sorry, no information available."
LOWEST_UID = 500
DEBUG = False
ALLOW_SYMLINKS = False

# Parse the command line
if "--debug" in sys.argv:
	DEBUG = True
if "--lowestuid" in sys.argv:
	LOWEST_UID = long(sys.argv[sys.argv.index("--lowestuid") + 1])
if "--allow-symlinks" in sys.argv:
	ALLOW_SYMLINKS = True

# Prevent accidentally running lfingerd as root.
if os.geteuid() == 0:
	raise RuntimeError, "FATAL ERROR: It is probably unsafe to run this program as a privileged user.  Please read the source code for more information."

# Get the request
request = re.split(r"\s", sys.stdin.readline()) 

try:
	# Initial request-parsing step
	if not request:
		raise RequestError, "Blank request"
	if request[0] == "/W":
		request = request[1:]	# ignore verbose switch
	if not request:
		raise RequestError, "Blank request after option parsing"
	
	# We don't forward requests, so crap out on "@whatever"
	username = request[0]
	if "@" in username:
		raise RequestError, "Client requested request forwarding"
	
	# Look for special lfingerd usernames
	if username == "lfingerd-version":
		sys.stdout.write(VERSION_INFO.replace("\n", CRLF) + CRLF)
		sys.exit(0)
	elif username == "lfingerd-copyright":
		sys.stdout.write(COPYRIGHT_INFO.replace("\n", CRLF) + CRLF)
		sys.exit(0)
	
	# Split out the "+extra" part of "username+extra"
	tmp = username.split("+",1)
	username = tmp[0]
	if len(tmp) > 1:
		extra = "-" + tmp[1]
	else:
		extra = ""
	
	# Find out the user's home directory
	# This will raise an exception if the user doesn't exist
	passwd = pwd.getpwnam(username)
	uid = passwd[2]
	homedir = passwd[5]
	
	if uid < LOWEST_UID:
		raise RequestError, "Request made for too-low uid %d" % uid 
	
	# Check for $HOME/.nofinger
	if os.path.exists(os.path.join(homedir, ".nofinger")):
		raise RequestError, "$HOME/.nofinger found"
	
	file = None
	for filename in (".lfingerd_data" + extra, ".plan" + extra,
			".lfingerd_data_default", ".plan"):
		try:
			file = mysafeopen(homedir, filename)
			break
		except (IOError, OSError, ValueError):
			pass
	if file is None:
		raise RequestError, "No information found"
		
	# Send the file, converting newlines
	block = file.read(1024).replace("\n", CRLF)
	lastblock = ""
	while block != "":
		lastblock = block
		sys.stdout.write(block)
		block = file.read(1024).replace("\n", CRLF)
	
	# Ensure there is a trailing newline
	if lastblock[-2:] != CRLF:
		sys.stdout.write(CRLF)
	
	file.close()
	sys.exit(0)
except:
	if DEBUG or sys.exc_info()[0] == exceptions.SystemExit:
		raise
	else:
		sys.stdout.write(RequestError + CRLF)
		sys.exit(0)
